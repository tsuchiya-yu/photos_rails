<% content_for :title, "動画・写真の追加" %>
<div class='container mx-auto py-8 w-full max-w-xl flex-grow outline-none bg-white'>
    <% breadcrumb :new_mypage_group_album_media_item, @album %>
    <%= render 'shared/page_title', title: '動画・写真の追加' %>

    <div id="previewContainer" class='flex flex-wrap overflow-hidden my-5'>
        <%# アップロードされた画像の表示エリア %>
    </div>

    <form id="uploadForm" class="flex flex-col items-center justify-center p-6 border-2 border-red-500 border-dashed rounded-lg shadow-md">
        <label for="media" class="px-6 py-2 bg-red-500 text-white rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-700 focus:ring-opacity-50 cursor-pointer">ファイルを選択</label>
        <input type="file" id="media" name="media[]" accept="image/*,video/*" multiple class="hidden">
        <span id="file-chosen" class="text-sm text-gray-500 mt-3">または ドラッグ&ドロップ</span>
    </form>

    <%= render 'shared/loading' %>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const uploadForm = document.getElementById('uploadForm');
        const mediaInput = document.getElementById('media');
        const previewContainer = document.getElementById('previewContainer');

        function handleFiles(files) {
            files = [...files];
            const promises = [];

            showLoading();

            files.forEach(file => {
                promises.push(new Promise((resolve, reject) => {
                    previewFile(file);
                    uploadFile(file, file.name).then(resolve).catch(reject);
                }));
            });

            Promise.all(promises).then(() => {
                hideLoading();
            }).catch(error => {
                hideLoading();
                console.error('Upload failed:', error);
            });
        }

        function previewFile(file) {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onloadend = () => {
                const img = document.createElement('img');
                img.src = reader.result;
                img.className = 'w-full h-full object-cover';

                const closeButton = document.createElement('div');
                closeButton.innerHTML = '×';
                closeButton.className = 'absolute top-0 right-0 bg-red-500 text-white w-6 h-6 flex items-center justify-center rounded-full cursor-pointer opacity-70';

                const imageContainer = document.createElement('div');
                imageContainer.className = 'w-1/4 object-cover border-2 border-black h-full bg-no-repeat bg-center relative';
                imageContainer.style.aspectRatio = '1 / 1';
                imageContainer.style.backgroundImage = 'url(<%= asset_path("loading.gif") %>)';
                imageContainer.appendChild(img);
                imageContainer.appendChild(closeButton);
                imageContainer.setAttribute('data-file-name', file.name);
                previewContainer.appendChild(imageContainer);

                img.onload = () => {
                    imageContainer.style.backgroundImage = 'none';
                };
                
                closeButton.addEventListener('click', function() {
                    if (imageContainer.hasAttribute('data-file-id')) {
                        const fileId = imageContainer.getAttribute('data-file-id');
                        const baseUrl = `<%= api_v1_album_media_item_path(album_id: @album.id, id: 'FILE_ID') %>`;
                        const url = baseUrl.replace('FILE_ID', fileId);

                        fetch(url, {
                            method: 'DELETE',
                            headers: {
                                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                            }
                        })
                        .then(response => {
                            if (response.ok) {
                                imageContainer.remove();
                                console.log('Success:', response);
                            } else {
                                alert('画像の削除に失敗しました.時間をおいて再度お試しください.');
                            }
                        })
                        .catch(error => console.error('Error:', error));
                    }
                });
            };
        }

        function uploadFile(file, fileName) {
            return new Promise((resolve, reject) => {
                const formData = new FormData();
                formData.append('media_item[media][]', file);
                const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

                fetch(`<%= api_v1_album_media_items_path(album_id: @album.id) %>`, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRF-Token': csrfToken
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.id) {
                        const lastImageContainer = [...document.querySelectorAll('.w-1\\/4')].reverse().find(el => !el.hasAttribute('data-file-id'));
                        if (lastImageContainer) {
                            lastImageContainer.setAttribute('data-file-id', data.id);
                        }
                    }
                    console.log('Success:', data);
                    resolve(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                    reject(error);
                });
            });
        }

        mediaInput.addEventListener('change', function() {
            handleFiles(this.files);
        });

        uploadForm.addEventListener('dragover', e => e.preventDefault());
        uploadForm.addEventListener('drop', e => {
            e.preventDefault();
            handleFiles(e.dataTransfer.files);
        });
    });
</script>