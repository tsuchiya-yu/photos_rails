<% content_for :title, "動画・写真の追加" %>
<div class='container mx-auto py-8 w-full max-w-xl flex-grow outline-none bg-white'>
    <% breadcrumb :new_mypage_group_album_media_item, @album %>
    <%= render 'shared/page_title', title: '動画・写真の追加' %>

    <div id="previewContainer" class='flex flex-wrap overflow-hidden my-5'>
        <%# アップロードされた画像の表示エリア %>
    </div>

    <form id="uploadForm" class="flex flex-col items-center justify-center p-6 border-2 border-red-500 border-dashed rounded-lg shadow-md">
        <label for="media" class="px-6 py-2 bg-red-500 text-white rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-700 focus:ring-opacity-50 cursor-pointer">ファイルを選択</label>
        <input type="file" id="media" name="media[]" accept="image/*,video/*" multiple class="hidden">
        <span id="file-chosen" class="text-sm text-gray-500 mt-3 hidden md:block">または ドラッグ&ドロップ</span>
    </form>

    <%= render 'shared/loading' %>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const uploadForm = document.getElementById('uploadForm');
        const mediaInput = document.getElementById('media');
        const previewContainer = document.getElementById('previewContainer');

        function handleFiles(files) {
            files = [...files];
            const promises = [];

            showLoading();

            files.forEach(file => {
                const preview = document.createElement('div');
                preview.className = 'w-1/4 object-cover border-2 border-black h-full bg-no-repeat bg-center relative overflow-hidden';
                preview.style.aspectRatio = '1 / 1';
                previewContainer.appendChild(preview);

                const reader = new FileReader();
                reader.onload = (e) => {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.className = 'w-full h-full object-cover';
                    img.maxWidth = '140px';
                    img.maxHeight = '140px';
                    preview.appendChild(img);
                };
                reader.readAsDataURL(file);

                promises.push(new Promise((resolve, reject) => {
                    uploadFile(file, preview).then(resolve).catch(reject);
                }));
            });

            Promise.all(promises).then(() => {
                hideLoading();
            }).catch(error => {
                hideLoading();
                console.error('Upload failed:', error);
            });
        }

        function uploadFile(file, previewElement) {
            return new Promise((resolve, reject) => {
                const formData = new FormData();
                formData.append('media_item[media][]', file);
                const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

                fetch(`<%= api_v1_album_media_items_path(album_id: @album.id) %>`, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRF-Token': csrfToken
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.thumbnail_url) {
                        previewElement.querySelector('img').src = data.thumbnail_url; // Update to thumbnail URL
                    }
                    console.log('Success:', data);
                    resolve(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                    reject(error);
                });
            });
        }

        mediaInput.addEventListener('change', function() {
            handleFiles(this.files);
        });

        uploadForm.addEventListener('dragover', e => e.preventDefault());
        uploadForm.addEventListener('drop', e => {
            e.preventDefault();
            handleFiles(e.dataTransfer.files);
        });
    });
</script>